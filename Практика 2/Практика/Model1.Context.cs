//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Практика
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Работа_индивидEntities : DbContext
    {
        public Работа_индивидEntities()
            : base("name=Работа_индивидEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<администрация> администрация { get; set; }
        public DbSet<АрхивСтанции> АрхивСтанции { get; set; }
        public DbSet<Видеонаблюдение> Видеонаблюдение { get; set; }
        public DbSet<ГрафикСмен> ГрафикСмен { get; set; }
        public DbSet<ГрузовыеМиссии> ГрузовыеМиссии { get; set; }
        public DbSet<инженеры> инженеры { get; set; }
        public DbSet<Командировки> Командировки { get; set; }
        public DbSet<Космонавты> Космонавты { get; set; }
        public DbSet<медицинские_данные> медицинские_данные { get; set; }
        public DbSet<МодулиСтанции> МодулиСтанции { get; set; }
        public DbSet<оборудование> оборудование { get; set; }
        public DbSet<продукты_питания> продукты_питания { get; set; }
        public DbSet<РасписаниЕРабот> РасписаниЕРабот { get; set; }
        public DbSet<Расходы> Расходы { get; set; }
        public DbSet<РезервныеКопии> РезервныеКопии { get; set; }
        public DbSet<технические_неисправности> технические_неисправности { get; set; }
        public DbSet<ТехническоеОбслуживание> ТехническоеОбслуживание { get; set; }
        public DbSet<ученые> ученые { get; set; }
        public DbSet<экипажи> экипажи { get; set; }
        public DbSet<Эксперименты> Эксперименты { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Администрация_Добавить(string администратор, string должность, string контакты, Nullable<int> iD_модуля)
        {
            var администраторParameter = администратор != null ?
                new ObjectParameter("Администратор", администратор) :
                new ObjectParameter("Администратор", typeof(string));
    
            var должностьParameter = должность != null ?
                new ObjectParameter("Должность", должность) :
                new ObjectParameter("Должность", typeof(string));
    
            var контактыParameter = контакты != null ?
                new ObjectParameter("Контакты", контакты) :
                new ObjectParameter("Контакты", typeof(string));
    
            var iD_модуляParameter = iD_модуля.HasValue ?
                new ObjectParameter("ID_модуля", iD_модуля) :
                new ObjectParameter("ID_модуля", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Администрация_Добавить", администраторParameter, должностьParameter, контактыParameter, iD_модуляParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_АрхивСтанции_Добавить(string событие, Nullable<System.DateTime> дата, string описание)
        {
            var событиеParameter = событие != null ?
                new ObjectParameter("Событие", событие) :
                new ObjectParameter("Событие", typeof(string));
    
            var датаParameter = дата.HasValue ?
                new ObjectParameter("Дата", дата) :
                new ObjectParameter("Дата", typeof(System.DateTime));
    
            var описаниеParameter = описание != null ?
                new ObjectParameter("Описание", описание) :
                new ObjectParameter("Описание", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_АрхивСтанции_Добавить", событиеParameter, датаParameter, описаниеParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Видеонаблюдение_Добавить(Nullable<int> iD_модуля, Nullable<System.DateTime> датаВремя, string описаниеСобытия)
        {
            var iD_модуляParameter = iD_модуля.HasValue ?
                new ObjectParameter("ID_модуля", iD_модуля) :
                new ObjectParameter("ID_модуля", typeof(int));
    
            var датаВремяParameter = датаВремя.HasValue ?
                new ObjectParameter("ДатаВремя", датаВремя) :
                new ObjectParameter("ДатаВремя", typeof(System.DateTime));
    
            var описаниеСобытияParameter = описаниеСобытия != null ?
                new ObjectParameter("ОписаниеСобытия", описаниеСобытия) :
                new ObjectParameter("ОписаниеСобытия", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Видеонаблюдение_Добавить", iD_модуляParameter, датаВремяParameter, описаниеСобытияParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ГрафикСмен_Добавить(Nullable<int> iD_космонавта, Nullable<System.DateTime> датаНачала, Nullable<System.DateTime> датаОкончания)
        {
            var iD_космонавтаParameter = iD_космонавта.HasValue ?
                new ObjectParameter("ID_космонавта", iD_космонавта) :
                new ObjectParameter("ID_космонавта", typeof(int));
    
            var датаНачалаParameter = датаНачала.HasValue ?
                new ObjectParameter("ДатаНачала", датаНачала) :
                new ObjectParameter("ДатаНачала", typeof(System.DateTime));
    
            var датаОкончанияParameter = датаОкончания.HasValue ?
                new ObjectParameter("ДатаОкончания", датаОкончания) :
                new ObjectParameter("ДатаОкончания", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ГрафикСмен_Добавить", iD_космонавтаParameter, датаНачалаParameter, датаОкончанияParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ГрузовыеМиссии_Добавить(string поставщик, Nullable<System.DateTime> дата_доставки, string содержимое, Nullable<int> модуль_id)
        {
            var поставщикParameter = поставщик != null ?
                new ObjectParameter("поставщик", поставщик) :
                new ObjectParameter("поставщик", typeof(string));
    
            var дата_доставкиParameter = дата_доставки.HasValue ?
                new ObjectParameter("дата_доставки", дата_доставки) :
                new ObjectParameter("дата_доставки", typeof(System.DateTime));
    
            var содержимоеParameter = содержимое != null ?
                new ObjectParameter("содержимое", содержимое) :
                new ObjectParameter("содержимое", typeof(string));
    
            var модуль_idParameter = модуль_id.HasValue ?
                new ObjectParameter("модуль_id", модуль_id) :
                new ObjectParameter("модуль_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ГрузовыеМиссии_Добавить", поставщикParameter, дата_доставкиParameter, содержимоеParameter, модуль_idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Инженеры_Добавить(string фИО, string отдел, string квалификация, Nullable<int> опыт, string телефон, string email)
        {
            var фИОParameter = фИО != null ?
                new ObjectParameter("ФИО", фИО) :
                new ObjectParameter("ФИО", typeof(string));
    
            var отделParameter = отдел != null ?
                new ObjectParameter("отдел", отдел) :
                new ObjectParameter("отдел", typeof(string));
    
            var квалификацияParameter = квалификация != null ?
                new ObjectParameter("квалификация", квалификация) :
                new ObjectParameter("квалификация", typeof(string));
    
            var опытParameter = опыт.HasValue ?
                new ObjectParameter("опыт", опыт) :
                new ObjectParameter("опыт", typeof(int));
    
            var телефонParameter = телефон != null ?
                new ObjectParameter("телефон", телефон) :
                new ObjectParameter("телефон", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Инженеры_Добавить", фИОParameter, отделParameter, квалификацияParameter, опытParameter, телефонParameter, emailParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Командировки_Добавить(Nullable<int> iD_космонавта, string цель, Nullable<System.DateTime> датаНачала, Nullable<System.DateTime> датаОкончания)
        {
            var iD_космонавтаParameter = iD_космонавта.HasValue ?
                new ObjectParameter("ID_космонавта", iD_космонавта) :
                new ObjectParameter("ID_космонавта", typeof(int));
    
            var цельParameter = цель != null ?
                new ObjectParameter("Цель", цель) :
                new ObjectParameter("Цель", typeof(string));
    
            var датаНачалаParameter = датаНачала.HasValue ?
                new ObjectParameter("ДатаНачала", датаНачала) :
                new ObjectParameter("ДатаНачала", typeof(System.DateTime));
    
            var датаОкончанияParameter = датаОкончания.HasValue ?
                new ObjectParameter("ДатаОкончания", датаОкончания) :
                new ObjectParameter("ДатаОкончания", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Командировки_Добавить", iD_космонавтаParameter, цельParameter, датаНачалаParameter, датаОкончанияParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Космонавты_Добавить(string фИО, string должность, Nullable<System.DateTime> дата_рождения, string статус)
        {
            var фИОParameter = фИО != null ?
                new ObjectParameter("ФИО", фИО) :
                new ObjectParameter("ФИО", typeof(string));
    
            var должностьParameter = должность != null ?
                new ObjectParameter("должность", должность) :
                new ObjectParameter("должность", typeof(string));
    
            var дата_рожденияParameter = дата_рождения.HasValue ?
                new ObjectParameter("дата_рождения", дата_рождения) :
                new ObjectParameter("дата_рождения", typeof(System.DateTime));
    
            var статусParameter = статус != null ?
                new ObjectParameter("статус", статус) :
                new ObjectParameter("статус", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Космонавты_Добавить", фИОParameter, должностьParameter, дата_рожденияParameter, статусParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_МедицинскиеДанные_Добавить(Nullable<int> iD_космонавт, Nullable<System.DateTime> обследование, Nullable<int> давление, Nullable<int> пульс, Nullable<int> уровень_сахара, string заключение)
        {
            var iD_космонавтParameter = iD_космонавт.HasValue ?
                new ObjectParameter("ID_космонавт", iD_космонавт) :
                new ObjectParameter("ID_космонавт", typeof(int));
    
            var обследованиеParameter = обследование.HasValue ?
                new ObjectParameter("обследование", обследование) :
                new ObjectParameter("обследование", typeof(System.DateTime));
    
            var давлениеParameter = давление.HasValue ?
                new ObjectParameter("давление", давление) :
                new ObjectParameter("давление", typeof(int));
    
            var пульсParameter = пульс.HasValue ?
                new ObjectParameter("пульс", пульс) :
                new ObjectParameter("пульс", typeof(int));
    
            var уровень_сахараParameter = уровень_сахара.HasValue ?
                new ObjectParameter("уровень_сахара", уровень_сахара) :
                new ObjectParameter("уровень_сахара", typeof(int));
    
            var заключениеParameter = заключение != null ?
                new ObjectParameter("заключение", заключение) :
                new ObjectParameter("заключение", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_МедицинскиеДанные_Добавить", iD_космонавтParameter, обследованиеParameter, давлениеParameter, пульсParameter, уровень_сахараParameter, заключениеParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_МодулиСтанции_Добавить(string название, string назначение, Nullable<System.DateTime> дата_запуска, string состояние, Nullable<int> id_экипажа)
        {
            var названиеParameter = название != null ?
                new ObjectParameter("название", название) :
                new ObjectParameter("название", typeof(string));
    
            var назначениеParameter = назначение != null ?
                new ObjectParameter("назначение", назначение) :
                new ObjectParameter("назначение", typeof(string));
    
            var дата_запускаParameter = дата_запуска.HasValue ?
                new ObjectParameter("дата_запуска", дата_запуска) :
                new ObjectParameter("дата_запуска", typeof(System.DateTime));
    
            var состояниеParameter = состояние != null ?
                new ObjectParameter("состояние", состояние) :
                new ObjectParameter("состояние", typeof(string));
    
            var id_экипажаParameter = id_экипажа.HasValue ?
                new ObjectParameter("id_экипажа", id_экипажа) :
                new ObjectParameter("id_экипажа", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_МодулиСтанции_Добавить", названиеParameter, назначениеParameter, дата_запускаParameter, состояниеParameter, id_экипажаParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Оборудование_Добавить(string серийный_номер, string производитель, string характеристики, Nullable<decimal> стоимость, Nullable<System.DateTime> дата_установки, Nullable<int> iD_модуля)
        {
            var серийный_номерParameter = серийный_номер != null ?
                new ObjectParameter("серийный_номер", серийный_номер) :
                new ObjectParameter("серийный_номер", typeof(string));
    
            var производительParameter = производитель != null ?
                new ObjectParameter("производитель", производитель) :
                new ObjectParameter("производитель", typeof(string));
    
            var характеристикиParameter = характеристики != null ?
                new ObjectParameter("характеристики", характеристики) :
                new ObjectParameter("характеристики", typeof(string));
    
            var стоимостьParameter = стоимость.HasValue ?
                new ObjectParameter("Стоимость", стоимость) :
                new ObjectParameter("Стоимость", typeof(decimal));
    
            var дата_установкиParameter = дата_установки.HasValue ?
                new ObjectParameter("дата_установки", дата_установки) :
                new ObjectParameter("дата_установки", typeof(System.DateTime));
    
            var iD_модуляParameter = iD_модуля.HasValue ?
                new ObjectParameter("ID_модуля", iD_модуля) :
                new ObjectParameter("ID_модуля", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Оборудование_Добавить", серийный_номерParameter, производительParameter, характеристикиParameter, стоимостьParameter, дата_установкиParameter, iD_модуляParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ПродуктыПитания_Добавить(string продукт, Nullable<int> количество, Nullable<System.DateTime> срок_годности)
        {
            var продуктParameter = продукт != null ?
                new ObjectParameter("продукт", продукт) :
                new ObjectParameter("продукт", typeof(string));
    
            var количествоParameter = количество.HasValue ?
                new ObjectParameter("количество", количество) :
                new ObjectParameter("количество", typeof(int));
    
            var срок_годностиParameter = срок_годности.HasValue ?
                new ObjectParameter("срок_годности", срок_годности) :
                new ObjectParameter("срок_годности", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ПродуктыПитания_Добавить", продуктParameter, количествоParameter, срок_годностиParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_РасписаниеРабот_Добавить(string задача, Nullable<int> id_Космонавта, Nullable<System.DateTime> срок)
        {
            var задачаParameter = задача != null ?
                new ObjectParameter("задача", задача) :
                new ObjectParameter("задача", typeof(string));
    
            var id_КосмонавтаParameter = id_Космонавта.HasValue ?
                new ObjectParameter("id_Космонавта", id_Космонавта) :
                new ObjectParameter("id_Космонавта", typeof(int));
    
            var срокParameter = срок.HasValue ?
                new ObjectParameter("срок", срок) :
                new ObjectParameter("срок", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_РасписаниеРабот_Добавить", задачаParameter, id_КосмонавтаParameter, срокParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Расходы_Добавить(string название, string категория, Nullable<int> количество, Nullable<int> iD_модуля)
        {
            var названиеParameter = название != null ?
                new ObjectParameter("Название", название) :
                new ObjectParameter("Название", typeof(string));
    
            var категорияParameter = категория != null ?
                new ObjectParameter("Категория", категория) :
                new ObjectParameter("Категория", typeof(string));
    
            var количествоParameter = количество.HasValue ?
                new ObjectParameter("Количество", количество) :
                new ObjectParameter("Количество", typeof(int));
    
            var iD_модуляParameter = iD_модуля.HasValue ?
                new ObjectParameter("ID_модуля", iD_модуля) :
                new ObjectParameter("ID_модуля", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Расходы_Добавить", названиеParameter, категорияParameter, количествоParameter, iD_модуляParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_РезервныеКопии_Добавить(Nullable<System.DateTime> датаСоздания, Nullable<int> размер, string путь, Nullable<int> id_медданных, Nullable<int> id_архива)
        {
            var датаСозданияParameter = датаСоздания.HasValue ?
                new ObjectParameter("ДатаСоздания", датаСоздания) :
                new ObjectParameter("ДатаСоздания", typeof(System.DateTime));
    
            var размерParameter = размер.HasValue ?
                new ObjectParameter("Размер", размер) :
                new ObjectParameter("Размер", typeof(int));
    
            var путьParameter = путь != null ?
                new ObjectParameter("Путь", путь) :
                new ObjectParameter("Путь", typeof(string));
    
            var id_медданныхParameter = id_медданных.HasValue ?
                new ObjectParameter("Id_медданных", id_медданных) :
                new ObjectParameter("Id_медданных", typeof(int));
    
            var id_архиваParameter = id_архива.HasValue ?
                new ObjectParameter("Id_архива", id_архива) :
                new ObjectParameter("Id_архива", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_РезервныеКопии_Добавить", датаСозданияParameter, размерParameter, путьParameter, id_медданныхParameter, id_архиваParameter);
        }
    
        public virtual int sp_ТехническиеНеисправности_Добавить(Nullable<int> модуль_id, string неисправность, Nullable<System.DateTime> дата, Nullable<int> iD_инженера)
        {
            var модуль_idParameter = модуль_id.HasValue ?
                new ObjectParameter("модуль_id", модуль_id) :
                new ObjectParameter("модуль_id", typeof(int));
    
            var неисправностьParameter = неисправность != null ?
                new ObjectParameter("неисправность", неисправность) :
                new ObjectParameter("неисправность", typeof(string));
    
            var датаParameter = дата.HasValue ?
                new ObjectParameter("дата", дата) :
                new ObjectParameter("дата", typeof(System.DateTime));
    
            var iD_инженераParameter = iD_инженера.HasValue ?
                new ObjectParameter("ID_инженера", iD_инженера) :
                new ObjectParameter("ID_инженера", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ТехническиеНеисправности_Добавить", модуль_idParameter, неисправностьParameter, датаParameter, iD_инженераParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_ТехническоеОбслуживание_Добавить(Nullable<int> iD_модуля, Nullable<System.DateTime> дата, string описаниеРабот, string статус, Nullable<int> iD_Инженера)
        {
            var iD_модуляParameter = iD_модуля.HasValue ?
                new ObjectParameter("ID_модуля", iD_модуля) :
                new ObjectParameter("ID_модуля", typeof(int));
    
            var датаParameter = дата.HasValue ?
                new ObjectParameter("Дата", дата) :
                new ObjectParameter("Дата", typeof(System.DateTime));
    
            var описаниеРаботParameter = описаниеРабот != null ?
                new ObjectParameter("ОписаниеРабот", описаниеРабот) :
                new ObjectParameter("ОписаниеРабот", typeof(string));
    
            var статусParameter = статус != null ?
                new ObjectParameter("Статус", статус) :
                new ObjectParameter("Статус", typeof(string));
    
            var iD_ИнженераParameter = iD_Инженера.HasValue ?
                new ObjectParameter("ID_Инженера", iD_Инженера) :
                new ObjectParameter("ID_Инженера", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_ТехническоеОбслуживание_Добавить", iD_модуляParameter, датаParameter, описаниеРаботParameter, статусParameter, iD_ИнженераParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Ученые_Добавить(string фИО, string страна, string научные_интересы, string контакты)
        {
            var фИОParameter = фИО != null ?
                new ObjectParameter("ФИО", фИО) :
                new ObjectParameter("ФИО", typeof(string));
    
            var странаParameter = страна != null ?
                new ObjectParameter("страна", страна) :
                new ObjectParameter("страна", typeof(string));
    
            var научные_интересыParameter = научные_интересы != null ?
                new ObjectParameter("научные_интересы", научные_интересы) :
                new ObjectParameter("научные_интересы", typeof(string));
    
            var контактыParameter = контакты != null ?
                new ObjectParameter("контакты", контакты) :
                new ObjectParameter("контакты", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Ученые_Добавить", фИОParameter, странаParameter, научные_интересыParameter, контактыParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Экипажи_Добавить(Nullable<int> номер_экипажа, Nullable<int> количество, Nullable<System.DateTime> начало_дата, Nullable<System.DateTime> конец_дата)
        {
            var номер_экипажаParameter = номер_экипажа.HasValue ?
                new ObjectParameter("номер_экипажа", номер_экипажа) :
                new ObjectParameter("номер_экипажа", typeof(int));
    
            var количествоParameter = количество.HasValue ?
                new ObjectParameter("количество", количество) :
                new ObjectParameter("количество", typeof(int));
    
            var начало_датаParameter = начало_дата.HasValue ?
                new ObjectParameter("начало_дата", начало_дата) :
                new ObjectParameter("начало_дата", typeof(System.DateTime));
    
            var конец_датаParameter = конец_дата.HasValue ?
                new ObjectParameter("конец_дата", конец_дата) :
                new ObjectParameter("конец_дата", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Экипажи_Добавить", номер_экипажаParameter, количествоParameter, начало_датаParameter, конец_датаParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Эксперименты_Добавить(string название, Nullable<System.DateTime> дата_начала, Nullable<int> id_ученого, string результат, string статус)
        {
            var названиеParameter = название != null ?
                new ObjectParameter("название", название) :
                new ObjectParameter("название", typeof(string));
    
            var дата_началаParameter = дата_начала.HasValue ?
                new ObjectParameter("дата_начала", дата_начала) :
                new ObjectParameter("дата_начала", typeof(System.DateTime));
    
            var id_ученогоParameter = id_ученого.HasValue ?
                new ObjectParameter("id_ученого", id_ученого) :
                new ObjectParameter("id_ученого", typeof(int));
    
            var результатParameter = результат != null ?
                new ObjectParameter("результат", результат) :
                new ObjectParameter("результат", typeof(string));
    
            var статусParameter = статус != null ?
                new ObjectParameter("статус", статус) :
                new ObjectParameter("статус", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Эксперименты_Добавить", названиеParameter, дата_началаParameter, id_ученогоParameter, результатParameter, статусParameter);
        }
    }
}
